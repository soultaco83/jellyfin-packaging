name: "Dev-- Build Docker"

on:
  schedule:
    - cron: '0 9 * * 0'  # Sunday at 6am
  workflow_dispatch:
    inputs:
      version:
        required: false
        type: string
        default: 'master'
        description: 'The server and web stable release tag ("vX.Y.Z") or "master"'

permissions:
  contents: write

# Prevent concurrent runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  update-submodules:
    runs-on: ubuntu-24.04
    outputs:
      submodules-changed: ${{ steps.check-changes.outputs.changed }}
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          submodules: true  # Changed to true

      - name: "Check for submodule changes"
        id: check-changes
        run: |
          # Get current submodule commits
          git submodule status > current_submodules.txt
          
          # Check if we have cached submodule state
          if [ -f .github/last_submodule_state.txt ]; then
            if diff -q current_submodules.txt .github/last_submodule_state.txt > /dev/null; then
              echo "changed=false" >> $GITHUB_OUTPUT
              echo "No submodule changes detected"
              exit 0
            fi
          fi
          
          echo "changed=true" >> $GITHUB_OUTPUT
          echo "Submodule changes detected or first run"
          
      - name: "Update submodules only if needed"
        if: steps.check-changes.outputs.changed == 'true'
        run: |
          # Install Python dependencies with cache
          pip install --cache-dir ~/.cache/pip GitPython PyYAML
          
          # Run checkout.py to update submodules
          chmod +x checkout.py
          ./checkout.py master
          
          # Save current state
          mkdir -p .github
          git submodule status > .github/last_submodule_state.txt
          
      - name: "Commit and push changes"
        if: steps.check-changes.outputs.changed == 'true'
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # Check if there are any changes to commit
          if git diff --quiet && git diff --staged --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          
          git add -A
          git commit -m "Update submodules to latest master"
          
          # Push with retry logic (optimized)
          git push origin master || {
            git pull --rebase origin master
            git push origin master
          }
          
  docker-build:
    needs: update-submodules
    runs-on: ubuntu-24.04
    steps:
      - name: "Checkout updated repository"
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 1  # Shallow clone for faster checkout
          submodules: true
          
      - name: "Set up Docker Buildx"
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host
            
      - name: "Cache Docker layers"
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('docker/Dockerfile') }}-${{ env.BUILD_DATE }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ hashFiles('docker/Dockerfile') }}-
            ${{ runner.os }}-buildx-
            
      - name: "Cache Python dependencies"
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
          
      - name: "Set version and release type"
        id: version
        run: |
          INPUT_VERSION="${{ inputs.version || 'master' }}"
          if [[ "$INPUT_VERSION" == "master" ]]; then
            echo "JELLYFIN_VERSION=$(date +'%Y%m%d%H')" >> $GITHUB_ENV
            echo "JELLYFIN_RELEASE_TYPE=unstable" >> $GITHUB_ENV
          elif [[ "$INPUT_VERSION" =~ ^v[0-9]+ ]]; then
            echo "JELLYFIN_VERSION=$INPUT_VERSION" >> $GITHUB_ENV
            echo "JELLYFIN_RELEASE_TYPE=stable" >> $GITHUB_ENV
          else
            echo "Invalid version input"
            exit 1
          fi
          echo "BUILD_DATE=$(date +'%Y%m%d')" >> $GITHUB_ENV
          
      - name: "Install dependencies"
        run: |
          # Use cache for apt packages
          sudo apt-get update
          sudo apt-get install --yes python3-yaml
          pip install --cache-dir ~/.cache/pip GitPython
          
      - name: "Log in to Docker Hub"
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: "Build and push Docker image"
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            soultaco83/jellyfin_with_request:dev
            soultaco83/jellyfin_with_request:${{ env.BUILD_DATE }}-dev
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          build-args: |
            JELLYFIN_VERSION=${{ env.JELLYFIN_VERSION }}
            BUILDKIT_INLINE_CACHE=1
            PACKAGE_ARCH=amd64
            DOTNET_ARCH=x64
            QEMU_ARCH=x86_64
            IMAGE_ARCH=amd64
            TARGET_ARCH=amd64
            
      - name: "Move cache"
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
